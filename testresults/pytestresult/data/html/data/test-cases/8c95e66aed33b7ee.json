{
  "uid" : "8c95e66aed33b7ee",
  "name" : "test_get_qa_similarity",
  "fullName" : "pytest.api.test_get_qa_similarity.TestQASimilarity#test_get_qa_similarity",
  "historyId" : "a8a223cf4cc8bf93341a15ddd2b4185d",
  "time" : {
    "start" : 1592210789119,
    "stop" : 1592212094143,
    "duration" : 1305024
  },
  "status" : "broken",
  "statusMessage" : "UnboundLocalError: local variable 'file_name' referenced before assignment",
  "statusTrace" : "self = <test_get_qa_similarity.TestQASimilarity object at 0x000002601FE473C8>\n\n    @pytest.mark.qa_similary_apitest\n    @allure.feature(\"线上全科室\")\n    def test_get_qa_similarity(self):\n        GetRequests().get_request(\"http://192.168.1.79:8234/bert_similarity/v2\", \"GET\", \"qa_similary\", \"None\",\n                                  \"similary\\\\qa_similary\\\\beauty.csv\", [\"sentence\", \"sentence2\"],\n                                  \"label\",\n>                                 \"全科室测试结果.xls\", \"None\")\n\napi\\test_get_qa_similarity.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.get_requests.GetRequests object at 0x000002601FE47518>\napi_url = 'http://192.168.1.79:8234/bert_similarity/v2', method = 'GET'\napi_category = 'qa_similary', target_file = 'None'\ntest_data_file = 'similary\\\\qa_similary\\\\beauty.csv'\ntestdata_param = ['sentence', 'sentence2'], assert_param = 'label'\nresult_file = '全科室测试结果.xls', target_result_file = 'None'\n\n    def get_request(self, api_url, method, api_category, target_file, test_data_file, testdata_param, assert_param,\n                    result_file, target_result_file):\n        \"\"\"\n        通过抽取测试集的数据，调用请求api接口，得出的测试结果，在调用函数获取二分类或，每个target的准确率，召回率，F1\n        :param target_file: 储存target的文件\n        :param data_file: 储存接口结果数据的文件\n        \"\"\"\n        # 获取测试集的data\n        # case1: 如果是ner的话特殊处理，需要提取字集，句子集，以及bio集\n        # case2：其他的接口正常读取testdata的所有值后续处理\n        # 定义人工标注，接口返回，是否一致列表\n        re_list, exp_list, tf_list, mul_params, word_list = [], [], [], [], []\n        if api_category == \"ner\":\n            word_list, words_list, exp_list = CommonFunction.get_ner_to_words(test_data_file)\n            f = open(rootPath + \"\\\\testresults\\\\resultfile\\\\\" + result_file, 'w+', encoding='utf-8',\n                     newline=\"\")\n            csv_writer = csv.writer(f)\n            # 输入csv文件四个列的title\n            csv_writer.writerow([\"word\", \"exp_bio\", \"re_bio\", \"tf\"])\n            n = -1  # 计数n，用于遍历word_list及bios_list对应的值\n            circle_data = words_list\n            for temp in tqdm(circle_data):  # 循环读取参数，并传入参数值\n                # 获取params参数\n                mul_params.append(temp)\n                mul_params.append(testdata_param[1])  # 不存在data中的话，直接赋值参数值\n                params = GetRequests.get_params(api_category, mul_params)  # 调用函数拼接参数对\n                mul_params.clear()  # 清空params\n                try:\n                    # 发送请求\n                    r = requests.request(method=method, url=api_url,\n                                         params=params,\n                                         timeout=500)\n                    result = r.json()\n                    response = GetRequests.get_response(api_category, result)  # 获取返回结果中所需要的对比值\n                    for i in range(0, len(response)):\n                        n = n + 1\n                        # 调用函数，查看人工bio与接口返回bio是否一致\n                        tf = CommonFunction.get_tf(exp_list[n], response[i])\n                        # csv循环填入字，人工bio值，接口返回bio值，以及tf值\n                        csv_writer.writerow([word_list[n], exp_list[n], response[i], tf])\n                        re_list.append(response[i])\n                        tf_list.append(tf)\n                except Exception as e:\n                    print(\"bad request\")\n        else:\n            test_data = ChangeDataType.csv_to_dict(rootPath + \"\\\\testdata\\\\apidata\\\\\" + test_data_file)\n            circle_data = test_data.iterrows()\n            for idx, temp in tqdm(circle_data):  # 循环读取参数，并传入参数值\n                # 获取params参数\n                # 针对接口需要两个及以上参数\n                if len(testdata_param) > 1:\n                    for i in range(0, len(testdata_param)):\n                        # 先判断参数值是否在testdata list中存在（因为相似度或者意图等接口会有科室参数，但是测试数据中无科室信息）\n                        if str(testdata_param[i]) in temp:\n                            mul_params.append(temp[testdata_param[i]])  # 存在的话储存该参数对应的值\n                        else:\n                            mul_params.append(testdata_param[i])  # 不存在data中的话，直接赋值参数值\n                    params = GetRequests.get_params(api_category, mul_params)  # 调用函数拼接参数对\n                    mul_params.clear()  # 清空params\n                else:  # 其他识别的接口中只有一个参数，直接拼接\n                    params = GetRequests.get_params(api_category, temp[testdata_param[0]])\n                try:\n                    # 发送请求\n                    r = requests.request(method=method, url=api_url,\n                                         params=params,\n                                         timeout=500)\n                    result = r.json()\n                    response = GetRequests.get_response(api_category, result)  # 获取返回结果中所需要的对比值\n                    # 对妇科多意图进行特定判断，处理\n                    if \"intent\" in api_category and \"gynaecology\" in testdata_param:\n                        assert_param_list = temp[assert_param].split(\"、\")  # 先对意图进行拆分，根据\"、\"进行拆分成列表（若只有一个则直接为本值）\n                        # 对拆分后的意图及返回结果的意图也进行排序\n                        assert_param_list.sort()\n                        response.sort()\n                        tf = CommonFunction.get_mult_tf(assert_param_list, response)  # 判断排序后的意图是否完全一致，完全一致则匹配成功\n                        exp_list.append(assert_param_list)  # 拼接已拆解并排序后的意图原始值\n                        re_list.append(response)  # 拼接已排序后的结果意图返回值\n                    else:\n                        # 针对相似度进行一个相似匹配，0.5为匹配阈值，可根据需要修改\n                        if \"qa_similary\" in api_category:\n                            response = CommonFunction.get_re_score(response, 0.5)\n                        if \"symptom_similary\" in api_category:\n                            response = CommonFunction.get_sys_similary_tf(response, temp[\"标准症状\"])\n                        tf = CommonFunction.get_tf(temp[assert_param], response)  # 判断是否一致，为后面输出做准备\n                        # 拼接三个列表值\n                        exp_list.append(temp[assert_param])  # 拼接原始值\n                        re_list.append(response)  # 拼接结果返回值\n                    tf_list.append(tf)  # 拼接是否一致值\n    \n                # 如果请求失败，打印bad request\n                except Exception as e:\n                    print(\"bad request\")\n    \n            test_data[\"response\"] = re_list  # 在testdata中拼接接口返回值，方便后期输出excel对齐显示\n            # 调用方法控制台打印输出相关信息（是否一致，总数，一致数，不一直数，一致率，不一致率等）\n            test_data, total_num, accuracy = CommonFunction.get_collection_1(test_data,\n                                                                             tf_list)\n            now = time.strftime('%y_%m_%d-%H_%M_%S')\n            test_data.to_excel(rootPath + '\\\\testresults\\\\resultfile\\\\' + now + result_file, index=False,\n                               encoding=\"utf-8\")  # 输出excel\n        if \"similary\" in api_category:  # 相似度处理（二分类算法，直接调用输出显示prf值）\n            Binary.binary_plot_curve(exp_list, re_list)\n        else:  # 其他接口（多分类算法，通过调用调用输出显示每个target的prf值）\n            file_name = GetRequests.get_target_result(self, target_file, exp_list, re_list, target_result_file,\n                                                      total_num, accuracy)\n>       return file_name\nE       UnboundLocalError: local variable 'file_name' referenced before assignment\n\n..\\api\\get_requests.py:201: UnboundLocalError",
  "flaky" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "线上全科室"
  }, {
    "name" : "tag",
    "value" : "qa_similary_apitest"
  }, {
    "name" : "parentSuite",
    "value" : "pytest.api"
  }, {
    "name" : "suite",
    "value" : "test_get_qa_similarity"
  }, {
    "name" : "subSuite",
    "value" : "TestQASimilarity"
  }, {
    "name" : "host",
    "value" : "WIN-OQ20V7UABJF"
  }, {
    "name" : "thread",
    "value" : "6404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "pytest.api.test_get_qa_similarity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "qa_similary_apitest" ]
  },
  "source" : "8c95e66aed33b7ee.json",
  "parameterValues" : [ ]
}